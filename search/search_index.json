{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#about","title":"About","text":"<p>Snoty is a low-code automation platform tailored towards students.</p> <p>Organized in Flows and Nodes, users can utilize the components provided to automate tasks and actions. Rather than attempting to cover every use case using pre-built automations, the end user is merely given the tools needed to achieve their desired outcome.</p> <p>Snoty, in theory, can be built to integrate with anything, such as common LMSes, your ToDo-List, calendar, notification service and more. Extensions can utilize the Snoty Framework, which not only provides basic stubs to hook extension code into the application, but also useful utilities related to persistence, data handling, logging, notifications and more.</p>"},{"location":"#how-to-use-this-documentation","title":"How to use this documentation","text":"<p>This documentation is organized into several sections:</p> <ul> <li>Setup: Self-hosting Snoty</li> <li>Usage: How to use Snoty, including the basic concepts</li> <li>Nodes: A reference documenting all the nodes available in Snot</li> <li>Examples: Examples of how to use Snoty</li> <li>Developers: How to develop for Snoty, including contributing and creating extension</li> </ul>"},{"location":"nodes/introduction/","title":"Nodes","text":"<p>As described in the usage section, Nodes are the building blocks of Snoty.</p>"},{"location":"nodes/builtin/http/","title":"HTTP","text":"<p>The HTTP Node is responsible for sending HTTP requests to a specified URL. It can be used to interact with APIs, fetch data from web services, or send data to a server.</p>"},{"location":"nodes/builtin/mapper/","title":"Mapper","text":"<p>The Mapper Node transforms data from one format to another. It is useful for converting data structures, changing data types, or applying custom transformations to the data.</p> <p>To achieve this, Templating languages are used to define the transformation rules. The Mapper Node supports both Liquid and, for simpler use cases, a custom-made templating language that merely supports replacing variables with their values.</p> <p>Since the two engines are totally different, they will be addressed separately.</p>"},{"location":"nodes/builtin/mapper/#replace","title":"Replace","text":"<p>The Batch-inspired syntax allows replacing variable names with their values. The syntax is as follows:</p> <pre><code>%variable%\n</code></pre> <p>By using this, simple replacements can be made such as:</p> <pre><code>This assignment is due on %due_date%.\n</code></pre> <p>Accessing nested variables is also possible:</p> <pre><code>This assignment is due on %course.assignment.due_date%.\n</code></pre> <p>That's it, for all other use cases, Liquid should be used. Therefore, it is mainly useful when your data already has the correct data types, the names are simply incompatible.</p>"},{"location":"nodes/builtin/mapper/#liquid","title":"Liquid","text":"<p>The Shopify-developed engine is a powerful and flexible templating language that allows for complex data transformations. It supports loops, conditionals, filters, and more. The Liqp library provides the Liquid templating engine. Therefore, the behavior may not mimic the original Ruby-based Liquid engine perfectly. For the most part, it should work as expected though.</p> <p>As Liquid is a nicely documented language with a ton of features, please refer to the official documentation: https://shopify.github.io/liquid/basics/introduction/</p> <p>Apart from the generic features, Snoty also provides some custom filters and tags:</p> <ol> <li><code>unidiff</code> filter 0.5.0<ul> <li>This filter is used to convert a list of dictionaries into a unified diff format. It takes a list of dictionaries   and returns a string representing the unified diff.</li> <li>Example:   <code>liquid   {% assign diff = diff.change.description.old | unidiff diff.change.description.new %}</code></li> </ul> </li> <li><code>format</code> filter next</li> </ol>"},{"location":"nodes/builtin/mapper/#examples","title":"Examples","text":""},{"location":"nodes/builtin/mapper/#list-all-changes","title":"List all changes","text":"<pre><code>## WebUntis-\u00c4nderung!\n\n{% for diff in diff.change %}\n- Change: {{ diff[0] }}\n  ```json\n  {{ diff[1] | json }}\n  ```\n{% endfor %}\n</code></pre>"},{"location":"setup/dev/","title":"Setting up your development environment","text":""},{"location":"setup/kubernetes/","title":"Setting up Snoty on Kubernetes","text":""}]}